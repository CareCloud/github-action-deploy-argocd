name: 'Deploy ArgoCD'
description: 'Deploy on Kubernetes with ArgoCD'
author: hello@cloudposse.com
branding:
  icon: 'cpu'
  color: 'white'
inputs:
  cluster:
    description: Cluster name
    required: true
  aws-region:
    description: AWS region
    required: false
    default: us-east-1
  helm-file-path:
    description: The path where lives the helmfile or helm chart.
    required: true
  helm-values-file:
    description: Helm values file
    default: ""
    required: false
  toolchain:
    description: Toolchain ('helm', 'helmfile')
    required: false
    default: helmfile
  service-config-ssm-path:
    required: true
    description: SSM path to read service config secrets
  platform-ssm-path:
    required: true
    description: SSM path to read platform secrets
  operation:
    description: Operation with helmfiles. (valid options - `deploy`, `destroy`)
    required: true
    default: deploy
  environment:
    description: Helmfile environment
    required: false
    default: preview
  repository:
    description: Application GitHub repository full name
    required: true
  ref:
    description: Git ref
    required: true
  gitref-sha:
    description: Git SHA (Depricated. Use `ref` instead)
    required: false
    default: ''
  namespace:
    description: Kubernetes namespace
    required: true
  app-name:
    description: Application name
    required: true
  image:
    description: Docker image
    required: true
  image-tag:
    description: Docker image tag
    required: true
  debug:
    description: Debug mode
    default: 'false'
    required: false
  release-label-name:
    description: The name of the label used to describe the helm release
    default: "release"
    required: false
  github-pat:
    description: Github PAT to access argocd configuration repository
    required: true
  synchronously:
    description: "Wait until ArgoCD successfully apply the changes"
    default: 'false'
  deployment-check-retry-count:
    description: 'Check retry count (for synchronously mode)'
    required: false
    default: "30"
  deployment-check-retry-interval:
    description: 'Check retry interval (in seconds) (for synchronously mode)'
    required: false
    default: "30"
outputs:
  webapp-url:
    description: "Web Application url"
    value: ${{ steps.result.outputs.webapp_url }}
  sha:
    description: "Git commit SHA into argocd repo"
    value: ${{ steps.git.outputs.sha }}
runs:
  using: "composite"
  steps:
    - name: Setup yq
      uses: dcarbone/install-yq-action@v1.1.0
      with:
        version: v4.28.1
        download-compressed: true
        force: true

    - name: Setup helmfile
      uses: mamezou-tech/setup-helmfile@v1.2.0
      if: ${{ inputs.operation == 'deploy' }}
      with:
        helmfile-version: v0.157.0 # https://github.com/helmfile/helmfile/releases
        helm-version: v3.13.0 # https://github.com/helm/helm/releases
        install-kubectl: false

    - id: destination
      uses: theowenyoung/git-url-parse@v1
      with:
        url: ${{ inputs.cluster }}

    - id: destination_dir
      shell: bash
      run: |-
        echo "name=$(echo $RANDOM | md5sum | head -c 20)" >> $GITHUB_OUTPUT

    - name: Config
      id: config
      uses: cloudposse/github-action-yaml-config-query@0.1.3
      with:
        config: |-
          tmp: ./tmp/${{ steps.destination.outputs.filepath }}/${{ inputs.namespace }}/${{ inputs.app-name }}
          path: ${{ steps.destination.outputs.filepath }}/${{ inputs.namespace }}/${{ inputs.app-name }}

    - name: Checkout Argo Configuration
      uses: actions/checkout@v2
      with:
        repository: ${{ steps.destination.outputs.owner }}/${{ steps.destination.outputs.name }}
        ref: ${{ steps.destination.outputs.ref }}
        token: ${{ inputs.github-pat }}
        path: ${{ steps.destination_dir.outputs.name }}

    - name: Read service context
      uses: docker://public.ecr.aws/u3q6g8t1/chamber:2.10.12
      if: ${{ inputs.operation == 'deploy' }}
      with:
        args: --verbose export ${{ inputs.service-config-ssm-path }} --format yaml --output-file ./service.yaml

    - name: YQ Platform settings
      if: ${{ inputs.operation == 'deploy' }}
      shell: bash
      run: |
        sudo chmod 777 ./service.yaml 
        yq --exit-status --no-colors --inplace eval '{"service": .}' ./service.yaml

    - name: Read platform context
      uses: docker://public.ecr.aws/u3q6g8t1/chamber:2.10.12
      if: ${{ inputs.operation == 'deploy' }}
      with:
        args: --verbose export ${{ inputs.platform-ssm-path }} --format yaml --output-file ./platform.yaml

    - name: YQ Platform settings
      if: ${{ inputs.operation == 'deploy' }}
      shell: bash
      run: |
        sudo chmod 777 ./platform.yaml 
        yq --exit-status --no-colors --inplace eval '{"platform": .}' ./platform.yaml

    # - name: Read platform metadata
    #   uses: docker://public.ecr.aws/u3q6g8t1/chamber:2.10.12
    #   if: ${{ inputs.operation == 'deploy' }}
    #   with:
    #     args: --verbose export ${{ inputs.platform-ssm-path }}/_metadata --format yaml --output-file ./_metadata.yaml

    # - name: YQ Platform settings
    #   if: ${{ inputs.operation == 'deploy' }}
    #   shell: bash
    #   id: metadata
    #   run: |
    #     for output in $(yq --exit-status --no-colors eval-all '. | to_entries | map( .key + "=" + .value ) | join("\n")' ./_metadata.yaml); do
    #       echo "${output}" >> $GITHUB_OUTPUT ;
    #     done

    - name: Context
      if: ${{ inputs.operation == 'deploy' }}
      id: arguments
      uses: cloudposse/github-action-yaml-config-query@0.1.3
      with:
        query: .${{ steps.metadata.outputs.kube_version == '' }}
        config: |-
          true: 
            kube_version: ""
          false:
            kube_version: --kube-version=${{ steps.metadata.outputs.kube_version }}      


    - name: Ensure argocd repo structure
      if: ${{ inputs.operation == 'deploy' }}
      shell: bash
      run: |
        mkdir -p ${{ steps.config.outputs.tmp }}/manifests

    - name: Read values file
      id: helm-values-file
      if: ${{ inputs.debug == 'true' && inputs.helm-values-file != '' }}
      uses: juliangruber/read-file-action@v1
      with:
        path: ${{ inputs.helm-values-file }}

    - name: Echo values file content
      if: ${{ inputs.debug == 'true' && inputs.helm-values-file != '' }}
      shell: bash
      run: echo "${{ steps.helm-values-file.outputs.content }}"

    - name: Create debug flag for helm
      if: ${{ inputs.debug == 'true' }}
      shell: bash
      run: echo "HELM_DEBUG_FLAG=--debug" >> $GITHUB_ENV

    - name: Helmfile render
      if: ${{ inputs.toolchain == 'helmfile' && inputs.operation == 'deploy' }}
      shell: bash
      run: |
        helmfile --namespace ${{ inputs.namespace }} \
          ${{ env.HELM_DEBUG_FLAG }} \
          --environment ${{ inputs.environment }} \
          --file ${{ inputs.helm-file-path}} \
          --state-values-file $(pwd)/service.yaml \
          --state-values-file $(pwd)/platform.yaml \
          --state-values-file "${{ inputs.helm-values-file }}" \
          template \
          --args="${{ steps.arguments.outputs.kube_version }}" \
          > ${{ steps.config.outputs.tmp }}/manifests/resources.yaml
      env:
        IMAGE_NAME: ${{ inputs.image }}
        IMAGE_TAG: ${{ inputs.image-tag }}

    - name: Helm raw render
      if: ${{ inputs.toolchain == 'helm' && inputs.operation == 'deploy' }}
      shell: bash
      run: |
        helm template ${{ inputs.app-name }} ${{ inputs.helm-file-path }} \
          --set image.repository=${{ inputs.image }} \
          --set image.tag=${{ inputs.image-tag }} \
          --set environment=${{ inputs.environment }} \
          --create-namespace=true \
          --namespace ${{ inputs.namespace }} \
          ${{ env.HELM_DEBUG_FLAG }} \
          --set ingress.default.hosts.example=test \
          --values $(pwd)/service.yaml \
          --values $(pwd)/platform.yaml \
          --values "${{ inputs.helm-values-file }}" \
          ${{ steps.arguments.outputs.kube_version }} \
        > ${{ steps.config.outputs.tmp }}/manifests/resources.yaml
      env:
        IMAGE_NAME: ${{ inputs.image }}
        IMAGE_TAG: ${{ inputs.image-tag }}

    - name: Get Webapp
      if: ${{ inputs.operation == 'deploy' }}
      id: result
      shell: bash
      run: |-
        WEBAPP_URL=$( \
          yq eval-all '.metadata.annotations["outputs.platform.cloudposse.com/webapp-url"] | select(. != null)' \
            ${{ steps.config.outputs.tmp }}/manifests/resources.yaml \
        )
        echo "webapp_url=${WEBAPP_URL}" >> $GITHUB_OUTPUT

    - name: Deplicated Ref
      if: ${{ inputs.operation == 'deploy' }}
      id: ref
      uses: cloudposse/github-action-yaml-config-query@0.1.3
      with:
        query: .${{ inputs.gitref-sha == '' }}
        config: |-
          true: 
            value: ${{ inputs.ref }}
          false:
            value: ${{ inputs.gitref-sha }}      

    - name: Config render
      if: ${{ inputs.operation == 'deploy' }}
      uses: 1arp/create-a-file-action@0.2
      with:
        path: ${{ steps.config.outputs.tmp }}
        file: config.yaml
        content: |-
          app_repository: ${{ inputs.repository }}
          app_commit: ${{ steps.ref.outputs.value }}
          app_hostname: ${{ steps.result.outputs.webapp_url }}
          name: ${{ inputs.namespace }}.${{ inputs.app-name }}
          namespace: ${{ inputs.namespace }}
          manifests: ${{ steps.config.outputs.path }}/manifests

    - name: Push to Github
      uses: nick-fields/retry@v2
      id: git
      with:
        timeout_minutes: 1
        max_attempts: 4
        shell: bash
        command: |-
          set -e
          
          git config --global user.email "bot@example.com"
          git config --global user.name "cloudpossebot"

          pushd ./${{ steps.destination_dir.outputs.name }}
          
          git reset --hard origin/${{ steps.destination.outputs.ref }}
          git pull --rebase
          
          popd
          
          case '${{ inputs.operation }}' in
        
            deploy)
              cp -r ./tmp/* ./${{ steps.destination_dir.outputs.name }}/
            ;;
          
            destroy)
              rm -rf ./${{ steps.destination_dir.outputs.name }}/${{ steps.config.outputs.path }}
            ;;
          
            *)
              echo "Operation should be `deploy` or `destroy`"
              exit 1;
            ;;
          esac          
          
          pushd ./${{ steps.destination_dir.outputs.name }}
          
          git add -A
          git status
          git diff-index --quiet HEAD || git commit -m "Deploy ${{ github.repository }} SHA ${{ github.sha }} RUN ${{ github.run_id }} ATEMPT ${{ github.run_attempt }}"
          git push origin ${{ steps.destination.outputs.ref }}

          echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          
          popd

    - uses: carecloud/github-action-wait-commit-status@main
      if: ${{ inputs.synchronously == 'true' && inputs.operation == 'deploy' }}
      with:
        repository: ${{ inputs.repository }}
        sha: ${{ inputs.ref }}
        status: "continuous-delivery/${{ inputs.namespace }}.${{ inputs.app-name }}"
        expected_state: "success"
        app-id: ${{ vars.CCH_DEPLOYMENT_STATUS_APP_ID }}
        app-private-key: ${{ secrets.CCH_DEPLOYMENT_STATUS_APP_PRIVATE_KEY }}
        check-retry-count: ${{ inputs.deployment-check-retry-count }}
        check-retry-interval: ${{ inputs.deployment-check-retry-interval }}     
